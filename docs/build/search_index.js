var documenterSearchIndex = {"docs":
[{"location":"manual/getting_started.html#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"manual/getting_started.html","page":"Getting Started","title":"Getting Started","text":"This guide will walk you through creating your first MicroUI application, from basic setup to building interactive interfaces.","category":"page"},{"location":"manual/getting_started.html#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"manual/getting_started.html","page":"Getting Started","title":"Getting Started","text":"using Pkg\nPkg.add(\"MicroUI\")","category":"page"},{"location":"manual/getting_started.html#Understanding-Immediate-Mode-GUIs","page":"Getting Started","title":"Understanding Immediate Mode GUIs","text":"","category":"section"},{"location":"manual/getting_started.html","page":"Getting Started","title":"Getting Started","text":"MicroUI is an immediate mode GUI library, which means:","category":"page"},{"location":"manual/getting_started.html","page":"Getting Started","title":"Getting Started","text":"No persistent widgets: UI elements are created fresh each frame\nDirect state management: You control all application state\nSimple mental model: UI code runs top-to-bottom, like a regular program\nEasy integration: No complex event handling or widget hierarchies","category":"page"},{"location":"manual/getting_started.html","page":"Getting Started","title":"Getting Started","text":"This is different from traditional retained mode GUIs where widgets persist between frames.","category":"page"},{"location":"manual/getting_started.html#Your-First-MicroUI-Application","page":"Getting Started","title":"Your First MicroUI Application","text":"","category":"section"},{"location":"manual/getting_started.html","page":"Getting Started","title":"Getting Started","text":"Let's start with the absolute minimum:","category":"page"},{"location":"manual/getting_started.html#Core-API-Approach","page":"Getting Started","title":"Core API Approach","text":"","category":"section"},{"location":"manual/getting_started.html","page":"Getting Started","title":"Getting Started","text":"using MicroUI\n\n# Create and initialize context\nctx = Context()\ninit!(ctx)\n\n# Set up text measurement callbacks (required)\nctx.text_width = (font, str) -> length(str) * 8  # 8 pixels per character\nctx.text_height = font -> 16                     # 16 pixels line height\n\n# Main UI loop (you'd typically put this in a render loop)\nbegin_frame(ctx)\n\nif begin_window(ctx, \"Hello MicroUI\", Rect(100, 100, 300, 200)) != 0\n    text(ctx, \"Welcome to MicroUI!\")\n    \n    if button(ctx, \"Click Me!\") != 0\n        println(\"Button was clicked!\")\n    end\n    \n    end_window(ctx)\nend\n\nend_frame(ctx)\n\n# At this point, ctx.command_list contains all rendering commands\n# You would pass these to your rendering backend","category":"page"},{"location":"manual/getting_started.html#Macro-DSL-Approach-(Recommended-for-Beginners)","page":"Getting Started","title":"Macro DSL Approach (Recommended for Beginners)","text":"","category":"section"},{"location":"manual/getting_started.html","page":"Getting Started","title":"Getting Started","text":"using MicroUI\nusing MicroUI.Macros\n\nctx = @context begin\n    @window \"Hello MicroUI\" begin\n        @text welcome = \"Welcome to MicroUI!\"\n        \n        @button click_btn = \"Click Me!\"\n        @onclick click_btn begin\n            @popup \"Button was clicked!\"\n        end\n    end\nend\n\n# ctx now contains all rendering commands","category":"page"},{"location":"manual/getting_started.html","page":"Getting Started","title":"Getting Started","text":"The macro approach is much more concise and handles state management automatically!","category":"page"},{"location":"manual/getting_started.html#Building-Interactive-Applications","page":"Getting Started","title":"Building Interactive Applications","text":"","category":"section"},{"location":"manual/getting_started.html#Example-1:-Counter-Application","page":"Getting Started","title":"Example 1: Counter Application","text":"","category":"section"},{"location":"manual/getting_started.html","page":"Getting Started","title":"Getting Started","text":"using MicroUI.Macros\n\n# Application runs in a loop (simplified here)\nfunction run_counter_app()\n    ctx = @context begin\n        @window \"Counter App\" begin\n            @var counter_value = 0\n            \n            @text display = \"Count: $counter_value\"\n            \n            @row [100, 100, 100] begin\n                @button increment_btn = \"+\"\n                @button decrement_btn = \"-\"  \n                @button reset_btn = \"Reset\"\n            end\n            \n            @onclick increment_btn begin\n                counter_value += 1\n            end\n            \n            @onclick decrement_btn begin\n                counter_value -= 1\n            end\n            \n            @onclick reset_btn begin\n                counter_value = 0\n            end\n        end\n    end\n    \n    return ctx\nend\n\n# In a real application, you'd call this in your render loop\nctx = run_counter_app()","category":"page"},{"location":"manual/getting_started.html#Example-2:-Settings-Panel","page":"Getting Started","title":"Example 2: Settings Panel","text":"","category":"section"},{"location":"manual/getting_started.html","page":"Getting Started","title":"Getting Started","text":"using MicroUI.Macros\n\nctx = @context begin\n    @window \"Application Settings\" begin\n        @text title = \"Settings\"\n        \n        @panel \"Audio\" begin\n            @checkbox enable_sound = true\n            @slider volume = 0.8 range(0.0, 1.0)\n            \n            @when enable_sound begin\n                @reactive volume_percent = \"Volume: $(round(Int, volume * 100))%\"\n                @text volume_display = volume_percent\n            end\n        end\n        \n        @panel \"Graphics\" begin\n            @checkbox fullscreen = false\n            @checkbox vsync = true\n            @slider brightness = 1.0 range(0.1, 2.0)\n        end\n        \n        @panel \"Controls\" begin\n            @row [100, 100] begin\n                @button save_btn = \"Save\"\n                @button cancel_btn = \"Cancel\"\n            end\n            \n            @onclick save_btn begin\n                @popup \"Settings saved!\"\n            end\n        end\n    end\nend","category":"page"},{"location":"manual/getting_started.html#Understanding-State-Management","page":"Getting Started","title":"Understanding State Management","text":"","category":"section"},{"location":"manual/getting_started.html#Automatic-State-Persistence","page":"Getting Started","title":"Automatic State Persistence","text":"","category":"section"},{"location":"manual/getting_started.html","page":"Getting Started","title":"Getting Started","text":"With the macro DSL, widget states automatically persist between frames:","category":"page"},{"location":"manual/getting_started.html","page":"Getting Started","title":"Getting Started","text":"# First frame\n@context begin\n    @window \"Persistent State\" begin\n        @checkbox remember_me = false  # Initial value\n        @slider volume = 0.5 range(0.0, 1.0)\n    end\nend\n\n# Second frame - values persist!\n@context begin  \n    @window \"Persistent State\" begin\n        @checkbox remember_me = false  # This initial value is IGNORED\n        @slider volume = 0.5 range(0.0, 1.0)  # User's actual value is used\n        \n        # Access current values\n        @reactive status = remember_me ? \"Remembered\" : \"Not remembered\"\n        @text status_display = status\n    end\nend","category":"page"},{"location":"manual/getting_started.html#Multiple-Windows","page":"Getting Started","title":"Multiple Windows","text":"","category":"section"},{"location":"manual/getting_started.html","page":"Getting Started","title":"Getting Started","text":"You can create multiple windows easily:","category":"page"},{"location":"manual/getting_started.html","page":"Getting Started","title":"Getting Started","text":"@context begin\n    @window \"Main Application\" begin\n        @text title = \"My App\"\n        @button settings_btn = \"Open Settings\"\n    end\n    \n    @window \"Settings\" begin\n        @text settings_title = \"Application Settings\"\n        @checkbox dark_mode = false\n        @button close_btn = \"Close\"\n    end\n    \n    @window \"About\" begin\n        @text about_text = \"MicroUI Application v1.0\"\n        @button ok_btn = \"OK\"\n    end\nend","category":"page"},{"location":"manual/getting_started.html#Common-Patterns","page":"Getting Started","title":"Common Patterns","text":"","category":"section"},{"location":"manual/getting_started.html#Conditional-UI-Elements","page":"Getting Started","title":"Conditional UI Elements","text":"","category":"section"},{"location":"manual/getting_started.html","page":"Getting Started","title":"Getting Started","text":"@context begin\n    @window \"Conditional Demo\" begin\n        @checkbox show_advanced = false\n        \n        @when show_advanced begin\n            @panel \"Advanced Options\" begin\n                @slider precision = 0.01 range(0.001, 1.0)\n                @checkbox debug_mode = false\n            end\n        end\n    end\nend","category":"page"},{"location":"manual/getting_started.html#Dynamic-Lists","page":"Getting Started","title":"Dynamic Lists","text":"","category":"section"},{"location":"manual/getting_started.html","page":"Getting Started","title":"Getting Started","text":"@context begin\n    @window \"Dynamic List\" begin\n        @var items = [\"Apple\", \"Banana\", \"Cherry\"]\n        \n        @foreach (i, item) in enumerate(items) begin\n            @row [200, 80] begin\n                @text \"item_$i\" = \"$i. $item\"\n                @button \"delete_$i\" = \"Delete\"\n            end\n            \n            @onclick \"delete_$i\" begin\n                # In a real app, you'd modify the items list\n                @popup \"Would delete: $item\"\n            end\n        end\n        \n        @button add_btn = \"Add Item\"\n        @onclick add_btn begin\n            # In a real app, you'd add to items list\n            @popup \"Would add new item\"\n        end\n    end\nend","category":"page"},{"location":"manual/getting_started.html#Input-Forms","page":"Getting Started","title":"Input Forms","text":"","category":"section"},{"location":"manual/getting_started.html","page":"Getting Started","title":"Getting Started","text":"@context begin\n    @window \"User Registration\" begin\n        @text title = \"Create Account\"\n        \n        @textbox username = \"\" maxlength(32)\n        @textbox email = \"\" maxlength(100)\n        @textbox password = \"\" maxlength(64)  # Note: real apps need password masking\n        \n        @checkbox agree_terms = false\n        \n        @row [100, 100] begin\n            @button register_btn = \"Register\"\n            @button cancel_btn = \"Cancel\"\n        end\n        \n        @onclick register_btn begin\n            @when agree_terms begin\n                @when (length(username) > 0 && length(email) > 0) begin\n                    @popup \"Registration successful!\"\n                end\n            end\n        end\n    end\nend","category":"page"},{"location":"manual/getting_started.html#Layout-System","page":"Getting Started","title":"Layout System","text":"","category":"section"},{"location":"manual/getting_started.html","page":"Getting Started","title":"Getting Started","text":"MicroUI provides flexible layout options:","category":"page"},{"location":"manual/getting_started.html#Row-Layouts","page":"Getting Started","title":"Row Layouts","text":"","category":"section"},{"location":"manual/getting_started.html","page":"Getting Started","title":"Getting Started","text":"@row [100, 200, -1] begin  # Fixed, Fixed, Fill remaining\n    @button btn1 = \"100px\"\n    @button btn2 = \"200px\" \n    @button btn3 = \"Remaining space\"\nend","category":"page"},{"location":"manual/getting_started.html#Column-Layouts","page":"Getting Started","title":"Column Layouts","text":"","category":"section"},{"location":"manual/getting_started.html","page":"Getting Started","title":"Getting Started","text":"@column begin\n    @text header = \"Column Header\"\n    @button item1 = \"First Item\"\n    @button item2 = \"Second Item\"\n    @button item3 = \"Third Item\"\nend","category":"page"},{"location":"manual/getting_started.html#Panels-(Grouped-Content)","page":"Getting Started","title":"Panels (Grouped Content)","text":"","category":"section"},{"location":"manual/getting_started.html","page":"Getting Started","title":"Getting Started","text":"@panel \"Network Settings\" begin\n    @checkbox enable_wifi = true\n    @textbox ssid = \"MyNetwork\"\n    @button connect_btn = \"Connect\"\nend","category":"page"},{"location":"manual/getting_started.html#Error-Handling-and-Debugging","page":"Getting Started","title":"Error Handling and Debugging","text":"","category":"section"},{"location":"manual/getting_started.html#Debug-Widget-States","page":"Getting Started","title":"Debug Widget States","text":"","category":"section"},{"location":"manual/getting_started.html","page":"Getting Started","title":"Getting Started","text":"@context begin\n    @window \"Debug Example\" begin\n        @checkbox test_flag = true\n        @slider test_value = 0.5 range(0.0, 1.0)\n        \n        # Debug all widget states for this window\n        @debug_types \"Debug Example\"\n    end\nend","category":"page"},{"location":"manual/getting_started.html#Common-Issues","page":"Getting Started","title":"Common Issues","text":"","category":"section"},{"location":"manual/getting_started.html","page":"Getting Started","title":"Getting Started","text":"Widget state not persisting: Make sure you're using the same variable names between frames\nType errors with sliders: Use Real type or let the macro handle conversion\nEvents not firing: Remember that @onclick checks for RES_SUBMIT flag\nLayout issues: Check your row/column specifications","category":"page"},{"location":"manual/getting_started.html#Integration-with-Rendering-Backends","page":"Getting Started","title":"Integration with Rendering Backends","text":"","category":"section"},{"location":"manual/getting_started.html","page":"Getting Started","title":"Getting Started","text":"MicroUI generates rendering commands that you pass to your graphics backend:","category":"page"},{"location":"manual/getting_started.html","page":"Getting Started","title":"Getting Started","text":"ctx = @context begin\n    # ... your UI code ...\nend\n\n# Process rendering commands\niter = CommandIterator(ctx.command_list)\nwhile true\n    (has_cmd, cmd_type, cmd_idx) = next_command!(iter)\n    if !has_cmd\n        break\n    end\n    \n    if cmd_type == MicroUI.COMMAND_RECT\n        rect_cmd = read_command(ctx.command_list, cmd_idx, RectCommand)\n        # Draw rectangle: rect_cmd.rect, rect_cmd.color\n    elseif cmd_type == MicroUI.COMMAND_TEXT\n        text_cmd = read_command(ctx.command_list, cmd_idx, TextCommand)\n        text_str = get_string(ctx.command_list, text_cmd.str_index)\n        # Draw text: text_str at text_cmd.pos with text_cmd.color\n    end\n    # ... handle other command types\nend","category":"page"},{"location":"manual/getting_started.html#Tips-for-Success","page":"Getting Started","title":"Tips for Success","text":"","category":"section"},{"location":"manual/getting_started.html","page":"Getting Started","title":"Getting Started","text":"Start simple: Begin with basic windows and buttons, add complexity gradually\nUse the macro DSL: It's much easier than the core API for most applications\nThink in frames: Remember that your UI code runs every frame\nEmbrace immediate mode: Don't try to cache or optimize prematurely\nHandle state explicitly: You control all application state, which gives you power and responsibility","category":"page"},{"location":"manual/getting_started.html","page":"Getting Started","title":"Getting Started","text":"Happy coding with MicroUI! 🚀","category":"page"},{"location":"index.html#MicroUI.jl","page":"Home","title":"MicroUI.jl","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"A Julia implementation of an immediate mode GUI (IMGUI) library, inspired by the MicroUI C library.","category":"page"},{"location":"index.html#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Immediate Mode: No persistent widget state - everything is recreated each frame\nBackend Independent: Command-based rendering system that works with any renderer\nMinimal Allocations: Optimized for performance with minimal runtime allocations\nDeclarative Macros: High-level DSL for building UIs quickly\nMultiple Windows: Support for complex applications with multiple windows","category":"page"},{"location":"index.html#Quick-Example","page":"Home","title":"Quick Example","text":"","category":"section"},{"location":"index.html#Core-API","page":"Home","title":"Core API","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"using MicroUI\n\n# Create context and set up callbacks\nctx = Context()\ninit!(ctx)\nctx.text_width = (font, str) -> length(str) * 8\nctx.text_height = font -> 16\n\n# Main UI loop\nbegin_frame(ctx)\n\nif begin_window(ctx, \"My Window\", Rect(10, 10, 300, 200)) != 0\n    if button(ctx, \"Click me!\") != 0\n        println(\"Button clicked!\")\n    end\n    \n    checkbox_state = Ref(false)\n    checkbox!(ctx, \"Enable feature\", checkbox_state)\n    \n    slider_value = Ref(50.0f0)\n    slider!(ctx, slider_value, 0.0f0, 100.0f0)\n    \n    end_window(ctx)\nend\n\nend_frame(ctx)","category":"page"},{"location":"index.html#Macro-DSL","page":"Home","title":"Macro DSL","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"using MicroUI\nusing MicroUI.Macros\n\nctx = @context begin\n    @window \"My Application\" begin\n        @text title = \"Hello World\"\n        \n        @button save_btn = \"Save\"\n        @onclick save_btn begin\n            @popup \"File saved!\"\n        end\n        \n        @checkbox enable_feature = true\n        @slider volume = 0.5 range(0.0, 1.0)\n        \n        @when enable_feature begin\n            @text status = \"Feature is enabled\"\n        end\n    end\nend","category":"page"},{"location":"index.html#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"# From Julia REPL\nusing Pkg\nPkg.add(\"MicroUI\")","category":"page"},{"location":"manual/api_reference.html#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"manual/api_reference.html","page":"API Reference","title":"API Reference","text":"Complete reference for all MicroUI.jl functions and types.","category":"page"},{"location":"manual/api_reference.html#Core-Module","page":"API Reference","title":"Core Module","text":"","category":"section"},{"location":"manual/api_reference.html#MicroUI.MicroUI","page":"API Reference","title":"MicroUI.MicroUI","text":"MicroUI.jl - A Julia implementation of an immediate mode GUI library\n\nThis module provides a complete immediate mode GUI (IMGUI) implementation in Julia, inspired by the microui C library. Immediate mode GUIs rebuild the entire interface each frame, making them simpler to reason about and integrate into applications.\n\nKey concepts:\n\nNo persistent widget state - everything is recreated each frame\nDirect integration with rendering backends\nMinimal memory allocations during runtime\nCommand-based rendering system for backend independence\n\n\n\n\n\n","category":"module"},{"location":"manual/api_reference.html#MicroUI.CLIPSTACK_SIZE","page":"API Reference","title":"MicroUI.CLIPSTACK_SIZE","text":"Maximum depth of clipping rectangle stack for nested clipping regions\n\n\n\n\n\n","category":"constant"},{"location":"manual/api_reference.html#MicroUI.COMMANDLIST_SIZE","page":"API Reference","title":"MicroUI.COMMANDLIST_SIZE","text":"Size of the command buffer in bytes - stores all rendering commands for a frame\n\n\n\n\n\n","category":"constant"},{"location":"manual/api_reference.html#MicroUI.CONTAINERPOOL_SIZE","page":"API Reference","title":"MicroUI.CONTAINERPOOL_SIZE","text":"Size of the container pool for efficient container reuse\n\n\n\n\n\n","category":"constant"},{"location":"manual/api_reference.html#MicroUI.CONTAINERSTACK_SIZE","page":"API Reference","title":"MicroUI.CONTAINERSTACK_SIZE","text":"Maximum depth of nested containers (windows, panels, etc.)\n\n\n\n\n\n","category":"constant"},{"location":"manual/api_reference.html#MicroUI.DEFAULT_STYLE","page":"API Reference","title":"MicroUI.DEFAULT_STYLE","text":"Default visual style with dark theme colors Provides sensible defaults for all UI elements\n\n\n\n\n\n","category":"constant"},{"location":"manual/api_reference.html#MicroUI.HASH_INITIAL","page":"API Reference","title":"MicroUI.HASH_INITIAL","text":"Hash constant for ID generation\n\n\n\n\n\n","category":"constant"},{"location":"manual/api_reference.html#MicroUI.IDSTACK_SIZE","page":"API Reference","title":"MicroUI.IDSTACK_SIZE","text":"Maximum depth of ID stack for hierarchical widget identification\n\n\n\n\n\n","category":"constant"},{"location":"manual/api_reference.html#MicroUI.LAYOUTSTACK_SIZE","page":"API Reference","title":"MicroUI.LAYOUTSTACK_SIZE","text":"Maximum depth of layout stack for nested layout contexts\n\n\n\n\n\n","category":"constant"},{"location":"manual/api_reference.html#MicroUI.MAX_FMT","page":"API Reference","title":"MicroUI.MAX_FMT","text":"Maximum length for number format strings\n\n\n\n\n\n","category":"constant"},{"location":"manual/api_reference.html#MicroUI.MAX_WIDTHS","page":"API Reference","title":"MicroUI.MAX_WIDTHS","text":"Maximum number of columns in a layout row\n\n\n\n\n\n","category":"constant"},{"location":"manual/api_reference.html#MicroUI.REAL_FMT","page":"API Reference","title":"MicroUI.REAL_FMT","text":"Default format string for real number display\n\n\n\n\n\n","category":"constant"},{"location":"manual/api_reference.html#MicroUI.RELATIVE","page":"API Reference","title":"MicroUI.RELATIVE","text":"Layout positioning modes\n\n\n\n\n\n","category":"constant"},{"location":"manual/api_reference.html#MicroUI.ROOTLIST_SIZE","page":"API Reference","title":"MicroUI.ROOTLIST_SIZE","text":"Maximum number of root containers (windows) that can be active simultaneously\n\n\n\n\n\n","category":"constant"},{"location":"manual/api_reference.html#MicroUI.SLIDER_FMT","page":"API Reference","title":"MicroUI.SLIDER_FMT","text":"Default format string for slider values\n\n\n\n\n\n","category":"constant"},{"location":"manual/api_reference.html#MicroUI.TREENODEPOOL_SIZE","page":"API Reference","title":"MicroUI.TREENODEPOOL_SIZE","text":"Size of the treenode pool for efficient treenode state management\n\n\n\n\n\n","category":"constant"},{"location":"manual/api_reference.html#MicroUI.UNCLIPPED_RECT","page":"API Reference","title":"MicroUI.UNCLIPPED_RECT","text":"Unclipped rectangle for resetting clipping state\n\n\n\n\n\n","category":"constant"},{"location":"manual/api_reference.html#MicroUI.VERSION","page":"API Reference","title":"MicroUI.VERSION","text":"Current version of the MicroUI library\n\n\n\n\n\n","category":"constant"},{"location":"manual/api_reference.html#MicroUI.BaseCommand","page":"API Reference","title":"MicroUI.BaseCommand","text":"Base header present in all command types Contains type information and size for command buffer traversal\n\n\n\n\n\n","category":"type"},{"location":"manual/api_reference.html#MicroUI.ClipCommand","page":"API Reference","title":"MicroUI.ClipCommand","text":"Clipping command to set the active clipping rectangle All subsequent rendering will be clipped to this region\n\n\n\n\n\n","category":"type"},{"location":"manual/api_reference.html#MicroUI.ClipResult","page":"API Reference","title":"MicroUI.ClipResult","text":"Clipping test results when checking if a rectangle is visible within the clip region\n\nCLIP_NONE: Rectangle is fully visible, no clipping needed\nCLIP_PART: Rectangle is partially visible, clipping required\nCLIP_ALL: Rectangle is completely outside clip region, skip rendering\n\n\n\n\n\n","category":"type"},{"location":"manual/api_reference.html#MicroUI.Color","page":"API Reference","title":"MicroUI.Color","text":"RGBA color with 8 bits per channel All color values in the library use this format\n\n\n\n\n\n","category":"type"},{"location":"manual/api_reference.html#MicroUI.ColorId","page":"API Reference","title":"MicroUI.ColorId","text":"Predefined color IDs for different UI elements These indices map to colors in the style's color array\n\n\n\n\n\n","category":"type"},{"location":"manual/api_reference.html#MicroUI.Command","page":"API Reference","title":"MicroUI.Command","text":"Abstract base type for all rendering commands\n\n\n\n\n\n","category":"type"},{"location":"manual/api_reference.html#MicroUI.CommandIterator","page":"API Reference","title":"MicroUI.CommandIterator","text":"Iterator for traversing the command buffer Handles jump commands automatically for proper Z-order rendering\n\n\n\n\n\n","category":"type"},{"location":"manual/api_reference.html#MicroUI.CommandList","page":"API Reference","title":"MicroUI.CommandList","text":"Command buffer that stores all rendering commands for a frame Manages both binary command data and string storage\n\n\n\n\n\n","category":"type"},{"location":"manual/api_reference.html#MicroUI.CommandPtr","page":"API Reference","title":"MicroUI.CommandPtr","text":"Pointer/index into the command buffer for command linking\n\n\n\n\n\n","category":"type"},{"location":"manual/api_reference.html#MicroUI.CommandType","page":"API Reference","title":"MicroUI.CommandType","text":"Types of rendering commands that can be stored in the command buffer Each command type corresponds to a specific rendering operation\n\n\n\n\n\n","category":"type"},{"location":"manual/api_reference.html#MicroUI.Container","page":"API Reference","title":"MicroUI.Container","text":"Container represents a window, panel, or other widget grouping Maintains its own command buffer region and layout state\n\n\n\n\n\n","category":"type"},{"location":"manual/api_reference.html#MicroUI.Context","page":"API Reference","title":"MicroUI.Context","text":"Main context structure containing all UI state This is the primary object that applications interact with\n\n\n\n\n\n","category":"type"},{"location":"manual/api_reference.html#MicroUI.Context-Tuple{}","page":"API Reference","title":"MicroUI.Context","text":"Create new context with default settings Applications should call init! after creation\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.Font","page":"API Reference","title":"MicroUI.Font","text":"Font handle - can be any type depending on rendering backend\n\n\n\n\n\n","category":"type"},{"location":"manual/api_reference.html#MicroUI.IconCommand","page":"API Reference","title":"MicroUI.IconCommand","text":"Icon drawing command for built-in symbols Icons are simple geometric shapes drawn at specified rectangles\n\n\n\n\n\n","category":"type"},{"location":"manual/api_reference.html#MicroUI.IconId","page":"API Reference","title":"MicroUI.IconId","text":"Built-in icon identifiers for common UI symbols Icons are drawn as simple geometric shapes\n\n\n\n\n\n","category":"type"},{"location":"manual/api_reference.html#MicroUI.Id","page":"API Reference","title":"MicroUI.Id","text":"Unique identifier for widgets and containers, generated from strings\n\n\n\n\n\n","category":"type"},{"location":"manual/api_reference.html#MicroUI.JumpCommand","page":"API Reference","title":"MicroUI.JumpCommand","text":"Jump command for non-linear command buffer traversal Used to implement container Z-ordering and command list linking\n\n\n\n\n\n","category":"type"},{"location":"manual/api_reference.html#MicroUI.Key","page":"API Reference","title":"MicroUI.Key","text":"Keyboard key flags for modifier keys and special keys Can be combined to check for key combinations\n\n\n\n\n\n","category":"type"},{"location":"manual/api_reference.html#MicroUI.Layout","page":"API Reference","title":"MicroUI.Layout","text":"Layout state for a container or layout context Manages positioning, sizing, and flow of widgets within a region\n\n\n\n\n\n","category":"type"},{"location":"manual/api_reference.html#MicroUI.MouseButton","page":"API Reference","title":"MicroUI.MouseButton","text":"Mouse button flags that can be combined with bitwise operations Multiple buttons can be pressed simultaneously\n\n\n\n\n\n","category":"type"},{"location":"manual/api_reference.html#MicroUI.Option","page":"API Reference","title":"MicroUI.Option","text":"Option flags for controlling widget and container behavior These flags can be combined using bitwise OR operations\n\n\n\n\n\n","category":"type"},{"location":"manual/api_reference.html#MicroUI.PoolItem","page":"API Reference","title":"MicroUI.PoolItem","text":"Pool item for efficient resource management Tracks when resources were last used for automatic cleanup\n\n\n\n\n\n","category":"type"},{"location":"manual/api_reference.html#MicroUI.Real","page":"API Reference","title":"MicroUI.Real","text":"Floating point type used for numeric values throughout the library\n\n\n\n\n\n","category":"type"},{"location":"manual/api_reference.html#MicroUI.Rect","page":"API Reference","title":"MicroUI.Rect","text":"Rectangle defined by position and size Forms the basis for all layout and clipping operations\n\n\n\n\n\n","category":"type"},{"location":"manual/api_reference.html#MicroUI.RectCommand","page":"API Reference","title":"MicroUI.RectCommand","text":"Rectangle drawing command for filled rectangles Used for backgrounds, borders, and solid color areas\n\n\n\n\n\n","category":"type"},{"location":"manual/api_reference.html#MicroUI.Result","page":"API Reference","title":"MicroUI.Result","text":"Result flags returned by interactive widgets Indicate what actions occurred during the last frame\n\n\n\n\n\n","category":"type"},{"location":"manual/api_reference.html#MicroUI.Stack","page":"API Reference","title":"MicroUI.Stack","text":"Generic stack data structure with overflow protection Used for managing nested contexts (containers, clips, layouts, etc.)\n\n\n\n\n\n","category":"type"},{"location":"manual/api_reference.html#MicroUI.Style","page":"API Reference","title":"MicroUI.Style","text":"Visual style configuration for the UI Contains colors, sizes, and other visual parameters\n\n\n\n\n\n","category":"type"},{"location":"manual/api_reference.html#MicroUI.TextCommand","page":"API Reference","title":"MicroUI.TextCommand","text":"Text rendering command for drawing strings Includes position, color, and string data\n\n\n\n\n\n","category":"type"},{"location":"manual/api_reference.html#MicroUI.Vec2","page":"API Reference","title":"MicroUI.Vec2","text":"2D integer vector for positions, sizes, and offsets Used extensively for layout calculations and positioning\n\n\n\n\n\n","category":"type"},{"location":"manual/api_reference.html#Base.:*-Tuple{Vec2, Number}","page":"API Reference","title":"Base.:*","text":"Scale vector by scalar\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#Base.:+-Tuple{Vec2, Vec2}","page":"API Reference","title":"Base.:+","text":"Add two vectors\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#Base.:--Tuple{Vec2, Vec2}","page":"API Reference","title":"Base.:-","text":"Subtract two vectors\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#Base.isempty-Tuple{MicroUI.Stack}","page":"API Reference","title":"Base.isempty","text":"Check if stack is empty\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.begin_frame-Tuple{Context}","page":"API Reference","title":"MicroUI.begin_frame","text":"Begin a new frame of UI processing Must be called before any widgets or containers\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.begin_panel-Tuple{Context, String}","page":"API Reference","title":"MicroUI.begin_panel","text":"Simple panel widget\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.begin_panel_ex-Tuple{Context, String, UInt16}","page":"API Reference","title":"MicroUI.begin_panel_ex","text":"Begin panel container Creates nested container within current layout\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.begin_popup-Tuple{Context, String}","page":"API Reference","title":"MicroUI.begin_popup","text":"Begin popup window Creates auto-sizing popup with no title bar or resize controls\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.begin_root_container!-Tuple{Context, Container}","page":"API Reference","title":"MicroUI.begin_root_container!","text":"Initialize root container for rendering Sets up command buffer region and hover detection\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.begin_treenode-Tuple{Context, String}","page":"API Reference","title":"MicroUI.begin_treenode","text":"Simple treenode widget\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.begin_treenode_ex-Tuple{Context, String, UInt16}","page":"API Reference","title":"MicroUI.begin_treenode_ex","text":"Begin collapsible treenode section Returns RES_ACTIVE if expanded\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.begin_window-Tuple{Context, String, Rect}","page":"API Reference","title":"MicroUI.begin_window","text":"Simple window widget\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.begin_window_ex-Tuple{Context, String, Rect, UInt16}","page":"API Reference","title":"MicroUI.begin_window_ex","text":"Begin window with full customization options Creates moveable, resizable window with title bar and optional controls\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.bring_to_front!-Tuple{Context, Container}","page":"API Reference","title":"MicroUI.bring_to_front!","text":"Bring container to front by updating its Z-index Higher Z-index containers are rendered on top\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.button-Tuple{Context, String}","page":"API Reference","title":"MicroUI.button","text":"Simple button widget with label Default button with center-aligned text\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.button_ex-Tuple{Context, String, Union{Nothing, MicroUI.IconId}, UInt16}","page":"API Reference","title":"MicroUI.button_ex","text":"Button widget with full customization options Returns RES_SUBMIT flag when clicked\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.check_clip-Tuple{Context, Rect}","page":"API Reference","title":"MicroUI.check_clip","text":"Test if rectangle is visible within current clipping region Returns clipping result for optimization decisions\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.checkbox!-Tuple{Context, String, Ref{Bool}}","page":"API Reference","title":"MicroUI.checkbox!","text":"Checkbox widget for boolean values Returns RES_CHANGE when toggled\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.clamp-Tuple{Any, Any, Any}","page":"API Reference","title":"MicroUI.clamp","text":"Clamp value between minimum and maximum bounds\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.compare_zindex-Tuple{Container, Container}","page":"API Reference","title":"MicroUI.compare_zindex","text":"Compare containers by Z-index for sorting\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.default_draw_frame-Tuple{Context, Rect, MicroUI.ColorId}","page":"API Reference","title":"MicroUI.default_draw_frame","text":"Default frame drawing function Draws a filled rectangle with optional border\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.draw_box!-Tuple{Context, Rect, Color}","page":"API Reference","title":"MicroUI.draw_box!","text":"Draw rectangle outline (border) Draws four separate rectangles for top, bottom, left, and right edges\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.draw_control_frame!-Tuple{Context, UInt32, Rect, MicroUI.ColorId, UInt16}","page":"API Reference","title":"MicroUI.draw_control_frame!","text":"Draw control frame with state-dependent styling Automatically selects color based on focus and hover state\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.draw_control_text!-Tuple{Context, String, Rect, MicroUI.ColorId, UInt16}","page":"API Reference","title":"MicroUI.draw_control_text!","text":"Draw control text with proper alignment and clipping Handles text positioning within widget rectangles\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.draw_icon!-Tuple{Context, MicroUI.IconId, Rect, Color}","page":"API Reference","title":"MicroUI.draw_icon!","text":"Draw built-in icon with automatic clipping Icons are simple geometric shapes rendered by the backend\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.draw_rect!-Tuple{Context, Rect, Color}","page":"API Reference","title":"MicroUI.draw_rect!","text":"Draw filled rectangle with clipping Only draws visible portions of the rectangle\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.draw_scrollbar!-Tuple{Context, Container, Rect, Vec2, String}","page":"API Reference","title":"MicroUI.draw_scrollbar!","text":"Draw scrollbar for given axis Handles scrollbar interaction and thumb positioning\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.draw_text!-Tuple{Context, Any, String, Int64, Vec2, Color}","page":"API Reference","title":"MicroUI.draw_text!","text":"Draw text string with automatic clipping handling Sets up clipping if needed and creates text command\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.end_frame-Tuple{Context}","page":"API Reference","title":"MicroUI.end_frame","text":"End current frame and prepare command buffer for rendering Handles container sorting, scrolling, and focus management\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.end_panel-Tuple{Context}","page":"API Reference","title":"MicroUI.end_panel","text":"End panel container\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.end_popup-Tuple{Context}","page":"API Reference","title":"MicroUI.end_popup","text":"End popup window\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.end_root_container!-Tuple{Context}","page":"API Reference","title":"MicroUI.end_root_container!","text":"Finalize root container Sets up command buffer tail and cleans up stacks\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.end_treenode-Tuple{Context}","page":"API Reference","title":"MicroUI.end_treenode","text":"End treenode section\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.end_window-Tuple{Context}","page":"API Reference","title":"MicroUI.end_window","text":"End window and clean up\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.expand_rect-Tuple{Rect, Int32}","page":"API Reference","title":"MicroUI.expand_rect","text":"Expand rectangle by given amount in all directions Useful for creating borders and padding\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.expand_rect-Tuple{Rect, Int64}","page":"API Reference","title":"MicroUI.expand_rect","text":"Expand rectangle by n pixels in all directions\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.format_real-Tuple{Float32, String}","page":"API Reference","title":"MicroUI.format_real","text":"Format real numbers for display in widgets Provides consistent number formatting throughout the UI\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.get_clip_rect-Tuple{Context}","page":"API Reference","title":"MicroUI.get_clip_rect","text":"Get current clipping rectangle\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.get_container-Tuple{Context, String}","page":"API Reference","title":"MicroUI.get_container","text":"Convenience function to get container by name\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.get_container-Tuple{Context, UInt32, UInt16}","page":"API Reference","title":"MicroUI.get_container","text":"Get or create container with given ID Uses pool for efficient container reuse\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.get_current_container-Tuple{Context}","page":"API Reference","title":"MicroUI.get_current_container","text":"Get current container from container stack\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.get_id-Tuple{Context, AbstractString}","page":"API Reference","title":"MicroUI.get_id","text":"Generate unique ID from string data Uses FNV-1a hash algorithm for consistent ID generation\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.get_layout-Tuple{Context}","page":"API Reference","title":"MicroUI.get_layout","text":"Get current layout context from stack\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.get_string-Tuple{MicroUI.CommandList, Int32}","page":"API Reference","title":"MicroUI.get_string","text":"Retrieve a string from the string table by index Used when processing text commands during rendering\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.header-Tuple{Context, String}","page":"API Reference","title":"MicroUI.header","text":"Simple header widget\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.header_ex-Tuple{Context, String, UInt16}","page":"API Reference","title":"MicroUI.header_ex","text":"Header widget for grouping content\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.header_impl-Tuple{Context, String, Bool, UInt16}","page":"API Reference","title":"MicroUI.header_impl","text":"Implementation for header and treenode widgets Handles expand/collapse state and visual styling\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.in_hover_root-Tuple{Context}","page":"API Reference","title":"MicroUI.in_hover_root","text":"Check if current container stack contains the hover root Used to determine if widgets should respond to mouse input\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.init!-Tuple{Context}","page":"API Reference","title":"MicroUI.init!","text":"Initialize or reset context to default state Should be called before first use and when resetting UI state\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.input_keydown!-Tuple{Context, MicroUI.Key}","page":"API Reference","title":"MicroUI.input_keydown!","text":"Handle key press event\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.input_keyup!-Tuple{Context, MicroUI.Key}","page":"API Reference","title":"MicroUI.input_keyup!","text":"Handle key release event\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.input_mousedown!-Tuple{Context, Int32, Int32, MicroUI.MouseButton}","page":"API Reference","title":"MicroUI.input_mousedown!","text":"Convenience overload for Int32 coordinates\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.input_mousedown!-Tuple{Context, Int64, Int64, MicroUI.MouseButton}","page":"API Reference","title":"MicroUI.input_mousedown!","text":"Handle mouse button press event\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.input_mousemove!-Tuple{Context, Int64, Int64}","page":"API Reference","title":"MicroUI.input_mousemove!","text":"Update mouse position\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.input_mouseup!-Tuple{Context, Int32, Int32, MicroUI.MouseButton}","page":"API Reference","title":"MicroUI.input_mouseup!","text":"Convenience overload for Int32 coordinates\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.input_mouseup!-Tuple{Context, Int64, Int64, MicroUI.MouseButton}","page":"API Reference","title":"MicroUI.input_mouseup!","text":"Handle mouse button release event\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.input_scroll!-Tuple{Context, Int64, Int64}","page":"API Reference","title":"MicroUI.input_scroll!","text":"Handle mouse scroll wheel input\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.input_text!-Tuple{Context, String}","page":"API Reference","title":"MicroUI.input_text!","text":"Add text input for current frame\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.intersect_rects-Tuple{Rect, Rect}","page":"API Reference","title":"MicroUI.intersect_rects","text":"Calculate intersection of two rectangles Returns rectangle representing overlapping area\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.label-Tuple{Context, String}","page":"API Reference","title":"MicroUI.label","text":"Simple text label widget Displays single line of text within widget rectangle\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.layout_begin_column!-Tuple{Context}","page":"API Reference","title":"MicroUI.layout_begin_column!","text":"Start column layout context within current layout\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.layout_end_column!-Tuple{Context}","page":"API Reference","title":"MicroUI.layout_end_column!","text":"End column layout and merge extents with parent Updates parent layout's position and maximum extents\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.layout_height!-Tuple{Context, Int64}","page":"API Reference","title":"MicroUI.layout_height!","text":"Set default height for next widget\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.layout_next-Tuple{Context}","page":"API Reference","title":"MicroUI.layout_next","text":"Calculate and return rectangle for next widget Handles both manual positioning and automatic layout flow\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.layout_row!-Tuple{Context, Int64, Union{Nothing, Vector{Int64}}, Int64}","page":"API Reference","title":"MicroUI.layout_row!","text":"Set up new layout row with specified items and dimensions Controls how widgets are positioned horizontally\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.layout_set_next!-Tuple{Context, Rect, Bool}","page":"API Reference","title":"MicroUI.layout_set_next!","text":"Manually set rectangle for next widget Can be relative to current position or absolute\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.layout_width!-Tuple{Context, Int64}","page":"API Reference","title":"MicroUI.layout_width!","text":"Set default width for next widget\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.mouse_over-Tuple{Context, Rect}","page":"API Reference","title":"MicroUI.mouse_over","text":"Test if mouse is over widget rectangle Considers clipping and hover root for proper interaction\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.next_command!-Tuple{CommandIterator}","page":"API Reference","title":"MicroUI.next_command!","text":"Advance iterator to next command, handling jumps automatically Returns (hascommand, commandtype, command_offset)\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.number!-Tuple{Context, Ref{Float32}, Float32}","page":"API Reference","title":"MicroUI.number!","text":"Simple number widget Default number input with standard step and formatting\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.number_ex!-Tuple{Context, Ref{Float32}, Float32, String, UInt16}","page":"API Reference","title":"MicroUI.number_ex!","text":"Number input widget with drag adjustment Allows precise number input and mouse drag adjustment\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.number_textbox!-Tuple{Context, Ref{Float32}, Rect, UInt32}","page":"API Reference","title":"MicroUI.number_textbox!","text":"Number editing textbox for slider/number widgets Handles special number editing mode with shift+click\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.open_popup!-Tuple{Context, String}","page":"API Reference","title":"MicroUI.open_popup!","text":"Open popup window at mouse position Sets up popup to appear at current mouse location\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.pool_get-Tuple{Context, Vector{MicroUI.PoolItem}, Int64, UInt32}","page":"API Reference","title":"MicroUI.pool_get","text":"Find pool item by ID Returns index if found, -1 if not found\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.pool_init!-Tuple{Context, Vector{MicroUI.PoolItem}, Int64, UInt32}","page":"API Reference","title":"MicroUI.pool_init!","text":"Initialize pool item with given ID Finds least recently used slot and assigns it to the ID\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.pool_update!-Tuple{Context, Vector{MicroUI.PoolItem}, Int64}","page":"API Reference","title":"MicroUI.pool_update!","text":"Update pool item's last access time to current frame\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.pop!-Tuple{MicroUI.Stack}","page":"API Reference","title":"MicroUI.pop!","text":"Pop item from stack with underflow checking\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.pop_clip_rect!-Tuple{Context}","page":"API Reference","title":"MicroUI.pop_clip_rect!","text":"Remove current clipping rectangle from stack\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.pop_container!-Tuple{Context}","page":"API Reference","title":"MicroUI.pop_container!","text":"Pop container and update its content size Called when exiting containers to finalize layout\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.pop_id!-Tuple{Context}","page":"API Reference","title":"MicroUI.pop_id!","text":"Pop ID scope from stack\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.push!-Union{Tuple{T}, Tuple{MicroUI.Stack{T}, T}} where T","page":"API Reference","title":"MicroUI.push!","text":"Push item onto stack with overflow checking\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.push_clip_rect!-Tuple{Context, Rect}","page":"API Reference","title":"MicroUI.push_clip_rect!","text":"Push new clipping rectangle onto stack\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.push_command!-Union{Tuple{T}, Tuple{Context, T}} where T","page":"API Reference","title":"MicroUI.push_command!","text":"Add command to command buffer Returns offset where command was written\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.push_container_body!-Tuple{Context, Container, Rect, UInt16}","page":"API Reference","title":"MicroUI.push_container_body!","text":"Set up container body with scrollbars and layout Prepares container for content rendering\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.push_id!-Tuple{Context, AbstractString}","page":"API Reference","title":"MicroUI.push_id!","text":"Push new ID scope onto ID stack Creates hierarchical namespace for widget IDs\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.push_jump_command!-Tuple{Context, Int32}","page":"API Reference","title":"MicroUI.push_jump_command!","text":"Add jump command for non-linear command buffer traversal Used to implement container Z-ordering\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.push_layout!-Tuple{Context, Rect, Vec2}","page":"API Reference","title":"MicroUI.push_layout!","text":"Create new layout context with given body rectangle and scroll offset Used when entering containers or column layouts\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.push_text_command!-Tuple{Context, Any, String, Vec2, Color}","page":"API Reference","title":"MicroUI.push_text_command!","text":"Add text rendering command with string data Handles string storage and creates complete text command\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.read_command-Union{Tuple{T}, Tuple{MicroUI.CommandList, Int32, Type{T}}} where T","page":"API Reference","title":"MicroUI.read_command","text":"Read a command from the buffer at the specified offset Type parameter specifies which command type to read\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.rect_overlaps_vec2-Tuple{Rect, Vec2}","page":"API Reference","title":"MicroUI.rect_overlaps_vec2","text":"Test if point is inside rectangle Used for hit testing and mouse interaction\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.scrollbars!-Tuple{Context, Container, Ref{Rect}}","page":"API Reference","title":"MicroUI.scrollbars!","text":"Handle scrollbars for container Adjusts body rectangle to make room for scrollbars\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.set_clip!-Tuple{Context, Rect}","page":"API Reference","title":"MicroUI.set_clip!","text":"Set clipping rectangle for subsequent rendering commands\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.set_focus!-Tuple{Context, UInt32}","page":"API Reference","title":"MicroUI.set_focus!","text":"Set keyboard focus to specific widget Widget will receive keyboard input and be highlighted\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.slider!-Tuple{Context, Ref{Float32}, Float32, Float32}","page":"API Reference","title":"MicroUI.slider!","text":"Simple slider widget Default slider with standard formatting\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.slider_ex!-Tuple{Context, Ref{Float32}, Float32, Float32, Float32, String, UInt16}","page":"API Reference","title":"MicroUI.slider_ex!","text":"Slider widget with full customization Allows dragging to adjust value within specified range\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.text-Tuple{Context, String}","page":"API Reference","title":"MicroUI.text","text":"Multi-line text display widget Automatically handles word wrapping and line breaks\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.textbox!-Tuple{Context, Ref{String}, Int64}","page":"API Reference","title":"MicroUI.textbox!","text":"Simple textbox widget Default textbox with no special options\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.textbox_ex!-Tuple{Context, Ref{String}, Int64, UInt16}","page":"API Reference","title":"MicroUI.textbox_ex!","text":"Textbox widget with options Provides text input with specified buffer size\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.textbox_raw!-Tuple{Context, Ref{String}, Int64, UInt32, Rect, UInt16}","page":"API Reference","title":"MicroUI.textbox_raw!","text":"Raw textbox implementation with full control Handles text input, editing, and cursor display\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.top-Tuple{MicroUI.Stack}","page":"API Reference","title":"MicroUI.top","text":"Get top item from stack without removing it\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.update_control!-Tuple{Context, UInt32, Rect, UInt16}","page":"API Reference","title":"MicroUI.update_control!","text":"Update widget interaction state Handles hover, focus, and click detection for interactive widgets\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.write_command!-Union{Tuple{T}, Tuple{MicroUI.CommandList, T}} where T","page":"API Reference","title":"MicroUI.write_command!","text":"Write a command to the command buffer Returns the offset where the command was written\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.write_string!-Tuple{MicroUI.CommandList, String}","page":"API Reference","title":"MicroUI.write_string!","text":"Store a string in the command list and return its index Used by text commands to reference their string data\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#Macro-DSL","page":"API Reference","title":"Macro DSL","text":"","category":"section"},{"location":"manual/api_reference.html#MicroUI.Macros.WIDGET_STATES","page":"API Reference","title":"MicroUI.Macros.WIDGET_STATES","text":"Global registry of all widget states, keyed by window ID\n\n\n\n\n\n","category":"constant"},{"location":"manual/api_reference.html#MicroUI.Macros.WidgetState","page":"API Reference","title":"MicroUI.Macros.WidgetState","text":"Widget state container that persists between frames. Stores variables, refs for stateful widgets, event handlers, and window state.\n\n\n\n\n\n","category":"type"},{"location":"manual/api_reference.html#MicroUI.Macros.clear_widget_states!-Tuple{}","page":"API Reference","title":"MicroUI.Macros.clear_widget_states!","text":"Clear all widget states (useful for testing and cleanup)\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.Macros.ensure_int_vector-Tuple{Any}","page":"API Reference","title":"MicroUI.Macros.ensure_int_vector","text":"Convert to proper vector type for layout.\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.Macros.ensure_real-Tuple{Number}","page":"API Reference","title":"MicroUI.Macros.ensure_real","text":"Convert to Real (Float32) for MicroUI consistency.\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.Macros.get_widget_state-Tuple{Symbol}","page":"API Reference","title":"MicroUI.Macros.get_widget_state","text":"Get or create widget state for a given window ID. Returns the same instance for the same window across multiple frames.\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.Macros.parse_assignment-Tuple{Any}","page":"API Reference","title":"MicroUI.Macros.parse_assignment","text":"Parse assignment expressions like 'var = value'. Returns (variablename, valueexpression) tuple.\n\n\n\n\n\n","category":"method"},{"location":"manual/api_reference.html#MicroUI.Macros.@button-Tuple{Any, Vararg{Any}}","page":"API Reference","title":"MicroUI.Macros.@button","text":"Button widget. Usage: @button name = \"text\"\n\n\n\n\n\n","category":"macro"},{"location":"manual/api_reference.html#MicroUI.Macros.@checkbox-Tuple{Any}","page":"API Reference","title":"MicroUI.Macros.@checkbox","text":"Checkbox widget with bulletproof type handling. Usage: @checkbox name = true/false\n\n\n\n\n\n","category":"macro"},{"location":"manual/api_reference.html#MicroUI.Macros.@close_window-Tuple{Any}","page":"API Reference","title":"MicroUI.Macros.@close_window","text":"Close window macro. Usage: @close_window \"Window Title\"\n\n\n\n\n\n","category":"macro"},{"location":"manual/api_reference.html#MicroUI.Macros.@column-Tuple{Any}","page":"API Reference","title":"MicroUI.Macros.@column","text":"Column layout. Usage: @column begin ... end\n\n\n\n\n\n","category":"macro"},{"location":"manual/api_reference.html#MicroUI.Macros.@context-Tuple{Any}","page":"API Reference","title":"MicroUI.Macros.@context","text":"Context management macro for MicroUI.\n\nCreates and manages a MicroUI context with proper frame lifecycle. All windows and UI elements must be inside a @context block.\n\nUsage:\n\nctx = @context begin\n    @window \"My Window\" begin\n        @var message = \"Hello World\"\n    end\nend\n\nReturns the MicroUI Context with all rendering commands.\n\n\n\n\n\n","category":"macro"},{"location":"manual/api_reference.html#MicroUI.Macros.@debug_types-Tuple{Any}","page":"API Reference","title":"MicroUI.Macros.@debug_types","text":"Debug macro to check types of widget state values. Usage: @debugtypes windowname\n\n\n\n\n\n","category":"macro"},{"location":"manual/api_reference.html#MicroUI.Macros.@foreach-Tuple{Any, Any}","page":"API Reference","title":"MicroUI.Macros.@foreach","text":"Loop for dynamic widgets. Usage: @foreach i in 1:5 begin ... end\n\n\n\n\n\n","category":"macro"},{"location":"manual/api_reference.html#MicroUI.Macros.@maxlength-Tuple{Any}","page":"API Reference","title":"MicroUI.Macros.@maxlength","text":"Helper macro for maxlength with proper types. Usage: maxlength(256) -> Int value\n\n\n\n\n\n","category":"macro"},{"location":"manual/api_reference.html#MicroUI.Macros.@number-Tuple{Any, Any}","page":"API Reference","title":"MicroUI.Macros.@number","text":"Number widget macro for precise numeric input. Usage: @number num_name = 10.0 step(1.0)\n\n\n\n\n\n","category":"macro"},{"location":"manual/api_reference.html#MicroUI.Macros.@onclick-Tuple{Any, Any}","page":"API Reference","title":"MicroUI.Macros.@onclick","text":"Click event handler. Usage: @onclick widget_name begin ... end\n\n\n\n\n\n","category":"macro"},{"location":"manual/api_reference.html#MicroUI.Macros.@open_window-Tuple{Any}","page":"API Reference","title":"MicroUI.Macros.@open_window","text":"Open window macro. Usage: @open_window \"Window Title\"\n\n\n\n\n\n","category":"macro"},{"location":"manual/api_reference.html#MicroUI.Macros.@panel-Tuple{Any, Any}","page":"API Reference","title":"MicroUI.Macros.@panel","text":"Panel macro for grouped widgets. Usage: @panel \"Title\" begin ... end\n\n\n\n\n\n","category":"macro"},{"location":"manual/api_reference.html#MicroUI.Macros.@popup-Tuple{Any}","page":"API Reference","title":"MicroUI.Macros.@popup","text":"Popup message. Usage: @popup \"message\"\n\n\n\n\n\n","category":"macro"},{"location":"manual/api_reference.html#MicroUI.Macros.@range-Tuple{Any, Any}","page":"API Reference","title":"MicroUI.Macros.@range","text":"Helper macro for creating ranges with proper types. Usage: range(0.0, 1.0) -> tuple of Real values\n\n\n\n\n\n","category":"macro"},{"location":"manual/api_reference.html#MicroUI.Macros.@reactive-Tuple{Any}","page":"API Reference","title":"MicroUI.Macros.@reactive","text":"Reactive computation using window state variables. Usage: @reactive result = windowstate.variables[:var1] + windowstate.variables[:var2] Or use helper: @reactive result = @v(var1) + @v(var2)\n\n\n\n\n\n","category":"macro"},{"location":"manual/api_reference.html#MicroUI.Macros.@row-Tuple{Any, Any}","page":"API Reference","title":"MicroUI.Macros.@row","text":"Row layout with proper integer types. Usage: @row [100, 200, -1] begin ... end\n\n\n\n\n\n","category":"macro"},{"location":"manual/api_reference.html#MicroUI.Macros.@simple_label-Tuple{Any}","page":"API Reference","title":"MicroUI.Macros.@simple_label","text":"Simple label widget. Usage: @simple_label name = \"text\"\n\n\n\n\n\n","category":"macro"},{"location":"manual/api_reference.html#MicroUI.Macros.@slider-Tuple{Any, Any}","page":"API Reference","title":"MicroUI.Macros.@slider","text":"Slider widget with bulletproof type handling. Usage: @slider name = initial_value range(low, high)\n\n\n\n\n\n","category":"macro"},{"location":"manual/api_reference.html#MicroUI.Macros.@state-Tuple{Any}","page":"API Reference","title":"MicroUI.Macros.@state","text":"Variable access helper for reactive expressions. Usage: @state(variable_name) -> gets value from window state\n\n\n\n\n\n","category":"macro"},{"location":"manual/api_reference.html#MicroUI.Macros.@step-Tuple{Any}","page":"API Reference","title":"MicroUI.Macros.@step","text":"Helper macro for steps with proper types. Usage: step(1.0) -> Real value\n\n\n\n\n\n","category":"macro"},{"location":"manual/api_reference.html#MicroUI.Macros.@text-Tuple{Any}","page":"API Reference","title":"MicroUI.Macros.@text","text":"Text display widget. Usage: @text name = \"content\"\n\n\n\n\n\n","category":"macro"},{"location":"manual/api_reference.html#MicroUI.Macros.@textbox-Tuple{Any, Any}","page":"API Reference","title":"MicroUI.Macros.@textbox","text":"Textbox widget macro for text input. Usage: @textbox text_name = \"default text\" maxlength(256)\n\n\n\n\n\n","category":"macro"},{"location":"manual/api_reference.html#MicroUI.Macros.@var-Tuple{Any}","page":"API Reference","title":"MicroUI.Macros.@var","text":"Variable assignment - stores in state only. Usage: @var name = value\n\n\n\n\n\n","category":"macro"},{"location":"manual/api_reference.html#MicroUI.Macros.@when-Tuple{Any, Any}","page":"API Reference","title":"MicroUI.Macros.@when","text":"Conditional rendering macro. Usage: @when condition begin ... end\n\n\n\n\n\n","category":"macro"},{"location":"manual/api_reference.html#MicroUI.Macros.@window-Tuple{Any, Any}","page":"API Reference","title":"MicroUI.Macros.@window","text":"Window macro for use within @context blocks.\n\nCreates a window with automatic state management. Must be used inside a @context block. The window state persists between frames for stateful widgets.\n\nUsage:\n\n@context begin\n    @window \"Window Title\" begin\n        @var message = \"Hello\"\n    end\nend\n\n\n\n\n\n","category":"macro"},{"location":"manual/api_reference.html#Usage-Examples","page":"API Reference","title":"Usage Examples","text":"","category":"section"},{"location":"manual/api_reference.html#Basic-Application","page":"API Reference","title":"Basic Application","text":"","category":"section"},{"location":"manual/api_reference.html","page":"API Reference","title":"API Reference","text":"using MicroUI\n\n# Create context\nctx = Context()\ninit!(ctx)\n\n# Set up text callbacks\nctx.text_width = (font, str) -> length(str) * 8\nctx.text_height = font -> 16\n\n# Main loop\nbegin_frame(ctx)\n\nif begin_window(ctx, \"My App\", Rect(50, 50, 300, 200)) != 0\n    text(ctx, \"Hello, MicroUI!\")\n    \n    if button(ctx, \"Click me!\") != 0\n        println(\"Button clicked!\")\n    end\n    \n    end_window(ctx)\nend\n\nend_frame(ctx)","category":"page"},{"location":"manual/api_reference.html#Using-Macro-DSL","page":"API Reference","title":"Using Macro DSL","text":"","category":"section"},{"location":"manual/api_reference.html","page":"API Reference","title":"API Reference","text":"using MicroUI\nusing MicroUI.Macros\n\nctx = @context begin\n    @window \"Settings\" begin\n        @var title = \"Application Settings\"\n        @text header = title\n        \n        @checkbox auto_save = true\n        @slider volume = 0.5 range(0.0, 1.0)\n        \n        @button save_btn = \"Save\"\n        @onclick save_btn begin\n            @popup \"Settings saved!\"\n        end\n    end\nend","category":"page"},{"location":"manual/api_reference.html#Integration-with-Rendering-Backends","page":"API Reference","title":"Integration with Rendering Backends","text":"","category":"section"},{"location":"manual/api_reference.html","page":"API Reference","title":"API Reference","text":"MicroUI generates rendering commands that you pass to your graphics backend:","category":"page"},{"location":"manual/api_reference.html","page":"API Reference","title":"API Reference","text":"ctx = @context begin\n    # ... your UI code ...\nend\n\n# Process rendering commands\niter = CommandIterator(ctx.command_list)\nwhile true\n    (has_cmd, cmd_type, cmd_idx) = next_command!(iter)\n    if !has_cmd\n        break\n    end\n    \n    if cmd_type == MicroUI.COMMAND_RECT\n        rect_cmd = read_command(ctx.command_list, cmd_idx, RectCommand)\n        # Draw rectangle: rect_cmd.rect, rect_cmd.color\n    elseif cmd_type == MicroUI.COMMAND_TEXT\n        text_cmd = read_command(ctx.command_list, cmd_idx, TextCommand)\n        text_str = get_string(ctx.command_list, text_cmd.str_index)\n        # Draw text: text_str at text_cmd.pos with text_cmd.color\n    end\n    # ... handle other command types\nend","category":"page"},{"location":"manual/api_reference.html#Required-Callbacks","page":"API Reference","title":"Required Callbacks","text":"","category":"section"},{"location":"manual/api_reference.html","page":"API Reference","title":"API Reference","text":"Before using MicroUI, set these callbacks on your context:","category":"page"},{"location":"manual/api_reference.html","page":"API Reference","title":"API Reference","text":"ctx.text_width = (font, str) -> Int        # Measure text width\nctx.text_height = font -> Int               # Get font height\nctx.draw_frame = (ctx, rect, colorid) -> Nothing # Draw widget frames (optional)","category":"page"}]
}
